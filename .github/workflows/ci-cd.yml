name: Quiz App CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # הפעלה ידנית

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: dov121212
  IMAGE_NAME: quiz-app

jobs:
  # שלב 1: בדיקות והכנה
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd tests
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start application stack
        run: |
          docker-compose build
          docker-compose up -d
          echo "Waiting for services to be ready..."
          sleep 30

          max_attempts=30
          for i in $(seq 1 $max_attempts); do
            if curl -f http://localhost/login >/dev/null 2>&1; then
              echo "✅ Services are ready!"
              break
            fi
            if [ $i -eq $max_attempts ]; then
              echo "❌ Services failed to start"
              docker-compose logs
              exit 1
            fi
            echo "Waiting... ($i/$max_attempts)"
            sleep 2
          done

      - name: Run basic tests
        run: |
          cd tests
          python test_basic.py
          python test_auth.py

      - name: Run nginx integration tests
        run: |
          cd tests
          python test_nginx_integration.py

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== DOCKER-COMPOSE LOGS ==="
          docker-compose logs
          echo "=== CONTAINER STATUS ==="
          docker-compose ps

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  # שלב 2: בניית images ו-push ל-Docker Hub
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: [nginx, auth-service, quiz-app, fail2ban]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # שלב 3: פריסה לסביבת ייצור
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment files
        run: |
          # שימוש במשתני הסביבה האמיתיים (bash)
          export DOCKER_USERNAME=${DOCKER_USERNAME}
          export IMAGE_NAME=${IMAGE_NAME}

          # אם קיים קובץ תבנית – השתמש בו, אחרת העתק את הקיים
          if [ -f docker-compose.prod.yml.template ]; then
            envsubst < docker-compose.prod.yml.template > docker-compose.prod.yml
          else
            cp docker-compose.yml docker-compose.prod.yml
            # עדכן את כל השירותים מ-build ל-image
            sed -i "s|build: ./nginx|image: \${DOCKER_USERNAME}/\${IMAGE_NAME}-nginx:latest #|g" docker-compose.prod.yml
            sed -i "s|build: ./auth-service|image: \${DOCKER_USERNAME}/\${IMAGE_NAME}-auth-service:latest #|g" docker-compose.prod.yml
            sed -i "s|build: ./quiz-app|image: \${DOCKER_USERNAME}/\${IMAGE_NAME}-quiz-app:latest #|g" docker-compose.prod.yml
            sed -i "s|build: ./fail2ban|image: \${DOCKER_USERNAME}/\${IMAGE_NAME}-fail2ban:latest #|g" docker-compose.prod.yml
            # הסר שורות context אם קיימות
            sed -i 's|context:.*|# context removed for prod|g' docker-compose.prod.yml
          fi

          # יצירת סקריפט פריסה עם טיפול בשגיאות
          cat > deploy.sh << 'EOF'
#!/bin/bash
set -e
echo "🚀 Starting deployment..."
docker-compose -f docker-compose.prod.yml down || true
docker system prune -f || true
docker-compose -f docker-compose.prod.yml pull
docker-compose -f docker-compose.prod.yml up -d
echo "⏳ Waiting for services to start..."
sleep 30
if curl -f http://localhost/login >/dev/null 2>&1; then
  echo "✅ Deployment successful!"
  docker-compose -f docker-compose.prod.yml ps
else
  echo "❌ Deployment failed - services not responding"
  docker-compose -f docker-compose.prod.yml logs
  exit 1
fi
docker image prune -f
echo "🎉 Deployment completed successfully!"
EOF

          chmod +x deploy.sh

      - name: Prepare server and login to Docker Hub securely
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            if ! echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin; then
              echo "❌ Failed to login to Docker Hub"
              exit 1
            fi
            mkdir -p ~/quiz-app-production
            cd ~/quiz-app-production
            if [ -f docker-compose.prod.yml ]; then
              cp docker-compose.prod.yml docker-compose.prod.yml.backup.$(date +%Y%m%d_%H%M%S)
            fi

      - name: Copy deployment files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "docker-compose.prod.yml,deploy.sh"
          target: "~/quiz-app-production/"

      - name: Run deployment with rollback on failure
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~/quiz-app-production
            if ! bash deploy.sh; then
              echo "❌ Deployment failed, rolling back..."
              latest_backup=$(ls -t docker-compose.prod.yml.backup.* 2>/dev/null | head -n1)
              if [ -n "$latest_backup" ]; then
                echo "Restoring from backup: $latest_backup"
                cp "$latest_backup" docker-compose.prod.yml
                bash deploy.sh || echo "⚠️ Rollback also failed!"
              else
                echo "⚠️ No backup found for rollback"
              fi
              docker logout
              exit 1
            fi
            docker logout
            echo "=== Final Status ==="
            docker-compose -f docker-compose.prod.yml ps
            docker-compose -f docker-compose.prod.yml logs --tail=20

  # שלב 4: בדיקות smoke לאחר deployment
  smoke-test:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 60

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests..."
          if curl -f http://${{ secrets.SERVER_HOST }}/login; then
            echo "✅ Login page accessible"
          else
            echo "❌ Login page not accessible"
            exit 1
          fi

          if curl -f http://${{ secrets.SERVER_HOST }}/api/question --max-time 10 >/dev/null 2>&1; then
            echo "✅ API endpoint is reachable"
          else
            echo "❌ API endpoint not reachable"
            exit 1
          fi

          echo "🎉 All smoke tests passed!"

  # שלב 5: התראות
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy, smoke-test]
    if: always()
    steps:
      - name: Notify on full success
        if: ${{ needs.deploy.result == 'success' && needs.smoke-test.result == 'success' }}
        run: |
          echo "🎉 Deployment pipeline completed successfully!"
          echo "✅ Tests: ${{ needs.test.result }}"
          echo "✅ Build & Push: ${{ needs.build-and-push.result }}"
          echo "✅ Deploy: ${{ needs.deploy.result }}"
          echo "✅ Smoke Tests: ${{ needs.smoke-test.result }}"

      - name: Notify on any failure
        if: ${{ failure() }}
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build & Push: ${{ needs.build-and-push.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Smoke Tests: ${{ needs.smoke-test.result }}"