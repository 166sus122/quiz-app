name: Quiz App CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: dov121212
  IMAGE_NAME: quiz-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd tests
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start application stack
        run: |
          docker compose build
          docker compose up -d
          echo "Waiting for services to be ready..."
          sleep 30

          max_attempts=30
          for i in $(seq 1 $max_attempts); do
            if curl -f http://localhost/login >/dev/null 2>&1; then
              echo "‚úÖ Services are ready!"
              break
            fi
            if [ $i -eq $max_attempts ]; then
              echo "‚ùå Services failed to start"
              docker compose logs
              exit 1
            fi
            echo "Waiting... ($i/$max_attempts)"
            sleep 2
          done

      - name: Run basic tests
        run: |
          cd tests
          python test_basic.py
          python test_auth.py

      - name: Run nginx integration tests
        run: |
          cd tests
          python test_nginx_integration.py

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== DOCKER-COMPOSE LOGS ==="
          docker compose logs
          echo "=== CONTAINER STATUS ==="
          docker compose ps

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: [nginx, auth-service, quiz-app, fail2ban]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment files
        run: |
          export DOCKER_USERNAME="${{ env.DOCKER_USERNAME }}"
          export IMAGE_NAME="${{ env.IMAGE_NAME }}"
          
          if [ -f docker-compose.prod.yml.template ]; then
            envsubst < docker-compose.prod.yml.template > docker-compose.prod.yml
          else
            # Create a proper production docker-compose file
            cat > docker-compose.prod.yml <<EOF
          version: '3.8'
          
          services:
            nginx:
              image: ${DOCKER_USERNAME}/${IMAGE_NAME}-nginx:latest
              ports:
                - "80:80"
                - "443:443"
              networks:
                - app-network
              depends_on:
                - auth-service
                - quiz-app
              restart: unless-stopped
          
            auth-service:
              image: ${DOCKER_USERNAME}/${IMAGE_NAME}-auth-service:latest
              networks:
                - app-network
              restart: unless-stopped
          
            quiz-app:
              image: ${DOCKER_USERNAME}/${IMAGE_NAME}-quiz-app:latest
              networks:
                - app-network
              restart: unless-stopped
          
            fail2ban:
              image: ${DOCKER_USERNAME}/${IMAGE_NAME}-fail2ban:latest
              privileged: true
              network_mode: host
              restart: unless-stopped
          
          networks:
            app-network:
              driver: bridge
          EOF
          fi

          cat > deploy.sh <<'EOF'
          #!/bin/bash
          set -e
          echo "üöÄ Starting deployment..."

          # Stop existing containers first
          docker compose -f docker-compose.prod.yml down || true

          # Stop common web servers that might be using port 80
          echo "üîç Checking for existing web servers..."
          sudo systemctl stop apache2 2>/dev/null || true
          sudo systemctl stop nginx 2>/dev/null || true
          sudo systemctl stop lighttpd 2>/dev/null || true

          # Kill any process using port 80
          sudo fuser -k 80/tcp 2>/dev/null || true

          # Kill any docker-proxy processes on port 80
          sudo pkill -f "docker-proxy.*80" || true

          # Kill any Python HTTP servers on port 80
          sudo pkill -f "python.*http.server.*80" || true
          sudo pkill -f "python.*SimpleHTTPServer.*80" || true

          # Wait for ports to be released
          sleep 3

          # Verify port 80 is free
          if sudo lsof -i :80 >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Port 80 still in use, showing what's using it:"
            sudo lsof -i :80
            echo "Forcing cleanup..."
            sudo lsof -ti :80 | xargs -r sudo kill -9 || true
            sleep 2
          fi

          docker system prune -f || true
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          if curl -f http://localhost/login >/dev/null 2>&1; then
            echo "‚úÖ Deployment successful!"
            docker compose -f docker-compose.prod.yml ps
          else
            echo "‚ùå Deployment failed - services not responding"
            docker compose -f docker-compose.prod.yml logs
            exit 1
          fi
          docker image prune -f
          echo "üéâ Deployment completed successfully!"
          EOF

          chmod +x deploy.sh

      - name: Prepare server and login to Docker Hub
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            if ! echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin; then
              echo "‚ùå Failed to login to Docker Hub"
              exit 1
            fi
            mkdir -p ~/quiz-app-production
            cd ~/quiz-app-production
            if [ -f docker-compose.prod.yml ]; then
              cp docker-compose.prod.yml docker-compose.prod.yml.backup.$(date +%Y%m%d_%H%M%S)
            fi

      - name: Copy deployment files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "docker-compose.prod.yml,deploy.sh"
          target: "~/quiz-app-production/"

      - name: Run deployment with rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~/quiz-app-production
            if ! bash deploy.sh; then
              echo "‚ùå Deployment failed, rolling back..."
              latest_backup=$(ls -t docker-compose.prod.yml.backup.* 2>/dev/null | head -n1)
              if [ -n "$latest_backup" ]; then
                echo "Restoring from backup: $latest_backup"
                cp "$latest_backup" docker-compose.prod.yml
                bash deploy.sh || echo "‚ö†Ô∏è Rollback also failed!"
              else
                echo "‚ö†Ô∏è No backup found for rollback"
              fi
              docker logout
              exit 1
            fi
            docker logout
            echo "=== Final Status ==="
            docker compose -f docker-compose.prod.yml ps
            docker compose -f docker-compose.prod.yml logs --tail=20

  smoke-test:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 60

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          if curl -f http://${{ secrets.SERVER_HOST }}/login >/dev/null 2>&1; then
            echo "‚úÖ Login page accessible"
          else
            echo "‚ùå Login page not accessible"
            exit 1
          fi

          # Test authentication endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST http://${{ secrets.SERVER_HOST }}/auth \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=admin&password=admin123" --max-time 10)

          if [ "$response" = "302" ] || [ "$response" = "200" ]; then
            echo "‚úÖ Auth endpoint is working (HTTP $response)"
          else
            echo "‚ùå Auth endpoint failed (HTTP $response)"
            exit 1
          fi

          echo "üéâ All smoke tests passed!"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy, smoke-test]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success' && needs.smoke-test.result == 'success'
        run: |
          echo "üéâ Deployment pipeline completed successfully!"
          echo "‚úÖ Tests: ${{ needs.test.result }}"
          echo "‚úÖ Build & Push: ${{ needs.build-and-push.result }}"
          echo "‚úÖ Deploy: ${{ needs.deploy.result }}"
          echo "‚úÖ Smoke Tests: ${{ needs.smoke-test.result }}"

      - name: Notify on failure
        if: failure() || needs.test.result == 'failure' || needs.build-and-push.result == 'failure' || needs.deploy.result == 'failure' || needs.smoke-test.result == 'failure'
        run: |
          echo "‚ùå CI/CD pipeline failed!"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build & Push: ${{ needs.build-and-push.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Smoke Tests: ${{ needs.smoke-test.result }}"